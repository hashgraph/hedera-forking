#!/usr/bin/env node

const { strict: assert } = require('assert');
const { LONG_ZERO_PREFIX } = require('../@hts-forking/src');
const { tokens } = require('../@hts-forking/test/data');

const { endpoint, searchParams } = function () {
    const urlarg = process.argv.at(-1);
    assert(urlarg !== undefined);

    const url = new URL(urlarg);
    assert(url.pathname.startsWith('/api/v1/'));
    return {
        endpoint: url.pathname.replace('/api/v1/', ''),
        searchParams: url.searchParams
    };
}();

for (const [re, fn] of /** @type {const} */([
    [/^tokens\/([\w.]+)$/, tokenId => {
        assert(typeof tokenId === 'string');
        const token = tokens[tokenId];
        assert(token !== undefined);

        return require(`../@hts-forking/test/data/${token.symbol}/getToken.json`);
    }],
    [/^tokens\/([\w.]+)\/balances$/, tokenId => {
        assert(typeof tokenId === 'string');
        const token = tokens[tokenId];
        assert(token !== undefined);

        const accountId = searchParams.get('account.id');
        assert(accountId !== null);

        return require(`../@hts-forking/test/data/${token.symbol}/getBalanceOfToken_${accountId}.json`);
    }],
    [/^accounts\/(0x[0-9a-fA-F]{40})$/, address => {
        assert(typeof address === 'string');
        try {
            return require(`../@hts-forking/test/data/getAccount_${address}.json`);
        } catch {
            if (address.startsWith(LONG_ZERO_PREFIX)) {
                return { account: '0.0.' + parseInt(address, 16) };
            }
            return undefined;
        }
    }],
    [/^accounts\/(0\.0\.\d+)\/allowances\/tokens$/, accountId => {
        assert(typeof accountId === 'string');
        const tokenId = searchParams.get('token.id');
        assert(tokenId !== null);
        const spenderId = searchParams.get('spender.id');
        assert(spenderId !== null);

        const token = tokens[tokenId];
        assert(token !== undefined);

        try {
            return require(`../@hts-forking/test/data/${token.symbol}/getAllowanceForToken_${accountId}_${spenderId}.json`);
        } catch {
            return undefined;
        }
    }],
])) {
    const match = endpoint.match(re);
    if (match !== null) {
        const response = fn(...match.slice(1));
        if (response !== undefined) {
            console.info(JSON.stringify(response));
            console.info('200');
            return;
        }
        break;
    }
}

console.info(JSON.stringify({ "_status": { "messages": [{ "message": "Not found" }] } }));
console.info('404');
