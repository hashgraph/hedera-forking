# Usage: lcovtoistanbul <input-lcov-file>
# Prints the content of the Istanbul text report.

awk -v input_file="$1" '
    function format_ranges(lines, result, start, end, i) {
        split(lines, arr, ",");
        start = arr[1];
        end = start;
        for (i = 2; i <= length(arr); i++) {
            if (arr[i] == end + 1) {
                end = arr[i];
            } else {
                result = result ? result "," (start == end ? start : start "-" end) : (start == end ? start : start "-" end);
                start = arr[i];
                end = start;
            }
        }
        return result ? result "," (start == end ? start : start "-" end) : (start == end ? start : start "-" end);
    }

    BEGIN {
        if (input_file == "") {
            print "Usage: lcovtoistanbul <input-lcov-file>" > "/dev/stderr";
            exit 1;
        }
        printf "------|----------|-----------|----------|----------|-------------------\n";
        printf " File | %% Stmts | %% Branch | %% Funcs | %% Lines | Uncovered Line #s \n";
        printf "------|----------|-----------|----------|----------|-------------------\n";
    }
    /^SF:/ {
        if (file ~ /^contracts\//) {
            branch_pct = (total_branch > 0) ? (covered_branch / total_branch) * 100 : 100;

            uncovered_display = (uncovered_list ? format_ranges(uncovered_list) : "");
            stmt_pct = (total_stmt > 0) ? (covered_stmt / total_stmt) * 100 : 100;
            func_pct = (total_func > 0) ? (covered_func / total_func) * 100 : 100;
            file_data[file] = sprintf(" %-22s | %7.2f | %8.2f | %7.2f | %7.2f | %-20s",
                                       file, stmt_pct, branch_pct, func_pct, stmt_pct, uncovered_display);
            total_all_stmt += total_stmt;
            covered_all_stmt += covered_stmt;
            total_all_branch += total_branch;
            covered_all_branch += covered_branch;
            total_all_func += total_func;
            covered_all_func += covered_func;
        }

        file = substr($0,4);
        total_stmt = covered_stmt = total_func = covered_func = 0;
        total_branch = covered_branch = 0;
        uncovered_list = "";
        function_has_branches = 0;  # Track whether any function had a BRDA entry
        next;
    }
    /^DA:/ {
        split($0, a, "[:,]");
        total_stmt++;
        if (a[3] == "0") {
            uncovered_list = uncovered_list ? uncovered_list "," a[2] : a[2];
        } else {
            covered_stmt++;
        }
        next;
    }
    /^BRDA:/ {
        split($0, a, "[:,]");
        total_branch++;
        if (a[5] != "-" && a[5] != "0") covered_branch++;
        next;
    }
    /^FNDA:/ {
        split($0, a, "[:,]");
        total_func++;
        if (a[2] != "0") covered_func++;
        next;
    }
    END {
        if (total_all_stmt == 0) {
            print "Error: No valid coverage data found in " input_file > "/dev/stderr";
            exit 1;
        }

        stmt_pct = (total_all_stmt > 0) ? (covered_all_stmt / total_all_stmt) * 100 : 100;
        branch_pct = (total_all_branch > 0) ? (covered_all_branch / total_all_branch) * 100 : 100;
        func_pct = (total_all_func > 0) ? (covered_all_func / total_all_func) * 100 : 100;

        printf " All files             | %7.2f | %8.2f | %7.2f | %7.2f | %-20s\n",
                stmt_pct, branch_pct, func_pct, stmt_pct, "";

        for (file in file_data) print file_data[file];

        printf "-----------|-------|-------|-------|-------|------\n";
    }
' "$1"
